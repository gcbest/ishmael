# source: https://us1.prisma.sh/godfrey-best-e89415/ishmael/dev
# timestamp: Tue Jan 14 2020 00:38:47 GMT-0500 (Eastern Standard Time)

type AggregateFacebook {
  count: Int!
}

type AggregateGoogle {
  count: Int!
}

type AggregateLocal {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Facebook implements Node {
  id: ID!
  token: String
  email: String
  name: String
}

"""A connection to a list of items."""
type FacebookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FacebookEdge]!
  aggregate: AggregateFacebook!
}

input FacebookCreateInput {
  id: ID
  token: String
  email: String
  name: String
}

input FacebookCreateOneInput {
  create: FacebookCreateInput
  connect: FacebookWhereUniqueInput
}

"""An edge in a connection."""
type FacebookEdge {
  """The item at the end of the edge."""
  node: Facebook!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FacebookOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
}

type FacebookPreviousValues {
  id: ID!
  token: String
  email: String
  name: String
}

type FacebookSubscriptionPayload {
  mutation: MutationType!
  node: Facebook
  updatedFields: [String!]
  previousValues: FacebookPreviousValues
}

input FacebookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FacebookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FacebookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FacebookSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FacebookWhereInput
}

input FacebookUpdateDataInput {
  token: String
  email: String
  name: String
}

input FacebookUpdateInput {
  token: String
  email: String
  name: String
}

input FacebookUpdateManyMutationInput {
  token: String
  email: String
  name: String
}

input FacebookUpdateOneInput {
  create: FacebookCreateInput
  connect: FacebookWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FacebookUpdateDataInput
  upsert: FacebookUpsertNestedInput
}

input FacebookUpsertNestedInput {
  update: FacebookUpdateDataInput!
  create: FacebookCreateInput!
}

input FacebookWhereInput {
  """Logical AND on all given filters."""
  AND: [FacebookWhereInput!]

  """Logical OR on all given filters."""
  OR: [FacebookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FacebookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input FacebookWhereUniqueInput {
  id: ID
}

type Google implements Node {
  id: ID!
  token: String
  email: String
  name: String
}

"""A connection to a list of items."""
type GoogleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoogleEdge]!
  aggregate: AggregateGoogle!
}

input GoogleCreateInput {
  id: ID
  token: String
  email: String
  name: String
}

input GoogleCreateOneInput {
  create: GoogleCreateInput
  connect: GoogleWhereUniqueInput
}

"""An edge in a connection."""
type GoogleEdge {
  """The item at the end of the edge."""
  node: Google!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GoogleOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
}

type GooglePreviousValues {
  id: ID!
  token: String
  email: String
  name: String
}

type GoogleSubscriptionPayload {
  mutation: MutationType!
  node: Google
  updatedFields: [String!]
  previousValues: GooglePreviousValues
}

input GoogleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GoogleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GoogleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GoogleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GoogleWhereInput
}

input GoogleUpdateDataInput {
  token: String
  email: String
  name: String
}

input GoogleUpdateInput {
  token: String
  email: String
  name: String
}

input GoogleUpdateManyMutationInput {
  token: String
  email: String
  name: String
}

input GoogleUpdateOneInput {
  create: GoogleCreateInput
  connect: GoogleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GoogleUpdateDataInput
  upsert: GoogleUpsertNestedInput
}

input GoogleUpsertNestedInput {
  update: GoogleUpdateDataInput!
  create: GoogleCreateInput!
}

input GoogleWhereInput {
  """Logical AND on all given filters."""
  AND: [GoogleWhereInput!]

  """Logical OR on all given filters."""
  OR: [GoogleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GoogleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input GoogleWhereUniqueInput {
  id: ID
}

type Local implements Node {
  id: ID!
  name: String
  email: String
  password: String
}

"""A connection to a list of items."""
type LocalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocalEdge]!
  aggregate: AggregateLocal!
}

input LocalCreateInput {
  id: ID
  name: String
  email: String
  password: String
}

input LocalCreateOneInput {
  create: LocalCreateInput
  connect: LocalWhereUniqueInput
}

"""An edge in a connection."""
type LocalEdge {
  """The item at the end of the edge."""
  node: Local!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocalOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type LocalPreviousValues {
  id: ID!
  name: String
  email: String
  password: String
}

type LocalSubscriptionPayload {
  mutation: MutationType!
  node: Local
  updatedFields: [String!]
  previousValues: LocalPreviousValues
}

input LocalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocalWhereInput
}

input LocalUpdateDataInput {
  name: String
  email: String
  password: String
}

input LocalUpdateInput {
  name: String
  email: String
  password: String
}

input LocalUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input LocalUpdateOneInput {
  create: LocalCreateInput
  connect: LocalWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocalUpdateDataInput
  upsert: LocalUpsertNestedInput
}

input LocalUpsertNestedInput {
  update: LocalUpdateDataInput!
  create: LocalCreateInput!
}

input LocalWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input LocalWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createFacebook(data: FacebookCreateInput!): Facebook!
  createLocal(data: LocalCreateInput!): Local!
  createGoogle(data: GoogleCreateInput!): Google!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFacebook(data: FacebookUpdateInput!, where: FacebookWhereUniqueInput!): Facebook
  updateLocal(data: LocalUpdateInput!, where: LocalWhereUniqueInput!): Local
  updateGoogle(data: GoogleUpdateInput!, where: GoogleWhereUniqueInput!): Google
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFacebook(where: FacebookWhereUniqueInput!): Facebook
  deleteLocal(where: LocalWhereUniqueInput!): Local
  deleteGoogle(where: GoogleWhereUniqueInput!): Google
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFacebook(where: FacebookWhereUniqueInput!, create: FacebookCreateInput!, update: FacebookUpdateInput!): Facebook!
  upsertLocal(where: LocalWhereUniqueInput!, create: LocalCreateInput!, update: LocalUpdateInput!): Local!
  upsertGoogle(where: GoogleWhereUniqueInput!, create: GoogleCreateInput!, update: GoogleUpdateInput!): Google!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyFacebooks(data: FacebookUpdateManyMutationInput!, where: FacebookWhereInput): BatchPayload!
  updateManyLocals(data: LocalUpdateManyMutationInput!, where: LocalWhereInput): BatchPayload!
  updateManyGoogles(data: GoogleUpdateManyMutationInput!, where: GoogleWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFacebooks(where: FacebookWhereInput): BatchPayload!
  deleteManyLocals(where: LocalWhereInput): BatchPayload!
  deleteManyGoogles(where: GoogleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  PERMISSIONUPDATE
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  facebooks(where: FacebookWhereInput, orderBy: FacebookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Facebook]!
  locals(where: LocalWhereInput, orderBy: LocalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Local]!
  googles(where: GoogleWhereInput, orderBy: GoogleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Google]!
  user(where: UserWhereUniqueInput!): User
  facebook(where: FacebookWhereUniqueInput!): Facebook
  local(where: LocalWhereUniqueInput!): Local
  google(where: GoogleWhereUniqueInput!): Google
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  facebooksConnection(where: FacebookWhereInput, orderBy: FacebookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FacebookConnection!
  localsConnection(where: LocalWhereInput, orderBy: LocalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocalConnection!
  googlesConnection(where: GoogleWhereInput, orderBy: GoogleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoogleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  facebook(where: FacebookSubscriptionWhereInput): FacebookSubscriptionPayload
  local(where: LocalSubscriptionWhereInput): LocalSubscriptionPayload
  google(where: GoogleSubscriptionWhereInput): GoogleSubscriptionPayload
}

type User implements Node {
  id: ID!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  local: Local
  facebook: Facebook
  google: Google
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  local: LocalCreateOneInput
  facebook: FacebookCreateOneInput
  google: GoogleCreateOneInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  local: LocalUpdateOneInput
  facebook: FacebookUpdateOneInput
  google: GoogleUpdateOneInput
}

input UserUpdateManyMutationInput {
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  local: LocalWhereInput
  facebook: FacebookWhereInput
  google: GoogleWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
